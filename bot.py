#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import logging
import asyncio
from datetime import datetime, timedelta
import uuid
import io

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    InputFile
)

from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackContext,
    CallbackQueryHandler,
    MessageHandler, 
    filters, 
    ContextTypes
)

from utils import logger, config, database, xray_manager, payment_manager
from utils.qrcode_generator import generate_vless_qr

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
AWAITING_PAYMENT = 'AWAITING_PAYMENT'
AWAITING_PROTOCOL = 'AWAITING_PROTOCOL'
AWAITING_SERVER = 'AWAITING_SERVER'
CHECKING_PAYMENT = 'CHECKING_PAYMENT'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def format_bytes(size):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size < 1024.0:
            return f"{size:.2f} {unit}"
        size /= 1024.0
    return f"{size:.2f} PB"

def format_time_left(seconds):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if seconds < 0:
        return "–ò—Å—Ç–µ–∫–ª–æ"
    
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    
    parts = []
    if days > 0:
        parts.append(f"{int(days)} –¥.")
    if hours > 0:
        parts.append(f"{int(hours)} —á.")
    if minutes > 0 and days == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–Ω—è
        parts.append(f"{int(minutes)} –º–∏–Ω.")
    
    return " ".join(parts) or "–ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_ids = config.get_admin_ids()
    return user_id in admin_ids

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
def get_subscription_plans():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return config.get_subscription_plans()

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    database.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    await update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è VLESS VPN –¥–æ—Å—Ç—É–ø–∞.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)

async def activate_trial(update: Update, context: CallbackContext):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if not config.is_trial_enabled():
        await query.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    active_subs = database.get_active_subscriptions(user_id)
    if active_subs:
        await query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–Ω–µ–µ
    user = database.get_user(user_id)
    all_subs = database.get_user_subscriptions(user_id)
    
    trial_used = any(sub.get('is_trial', False) for sub in all_subs)
    if trial_used:
        await query.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
    available_servers = xray_manager.get_available_servers()
    if len(available_servers) > 1:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        context.user_data['is_trial'] = True
        context.user_data['trial_days'] = config.get_trial_days()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞
        await show_server_selection(update, context)
        return
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –Ω–µ–º
    server_id = None
    if available_servers:
        server_id = available_servers[0]['id']
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    trial_days = config.get_trial_days()
    subscription = database.add_subscription(
        user_id=user_id,
        days=trial_days,
        payment_id=None,  # –ë–µ–∑ –ø–ª–∞—Ç–µ–∂–∞
        server_id=server_id  # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞
    )
    
    if subscription:
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –ø—Ä–æ–±–Ω—É—é
        subscription['is_trial'] = True
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray
        email = f"trial_user_{user_id}_{subscription['id']}"
        xray_user = xray_manager.add_user(email, server_id=server_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º UUID –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription['data']['vless_id'] = xray_user['id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            f"‚úÖ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
            f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {trial_days} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")
            ]])
        )
    else:
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "/prices - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã\n\n"
        
        "üîπ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
        "/qr - –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "/traffic - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞\n"
        "/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
        
        "üîπ *–î–ª—è –∞–¥–º–∏–Ω–æ–≤:*\n"
        "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.effective_user.id
    user_data = database.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    active_subs = database.get_active_subscriptions(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∞", callback_data="prices")]
    ]
    
    if active_subs:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        keyboard.append([InlineKeyboardButton("üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")])
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="traffic")])
        keyboard.append([InlineKeyboardButton("üì± –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥", callback_data="qr_code")])
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard.append([InlineKeyboardButton("üîë –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–Ω
        if config.is_trial_enabled():
            all_subs = database.get_user_subscriptions(user_id)
            trial_used = any(sub.get('is_trial', False) for sub in all_subs)
            
            if not trial_used:
                keyboard.append([InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    keyboard.append([InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    if active_subs:
        sub = active_subs[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        expiry_date = datetime.fromtimestamp(sub['expires_at'])
        time_left = sub['expires_at'] - time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server_info = ""
        if 'server_id' in sub and sub['server_id']:
            server = config.get_server_by_id(sub['server_id'])
            if server:
                server_name = server.get('name', f"Server {sub['server_id']}")
                server_info = f"üåç –°–µ—Ä–≤–µ—Ä: {server_name}\n"
        
        title = (
            f"üîπ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*\n\n"
            f"{server_info}"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {format_time_left(time_left)}\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date.strftime('%d.%m.%Y')}\n"
            f"üì≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
    else:
        title = (
            f"üîπ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=title,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=title,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def show_server_selection(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    query = update.callback_query
    if query:
        await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    available_servers = xray_manager.get_available_servers()
    
    if not available_servers:
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if query:
            await query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
    if len(available_servers) == 1:
        server = available_servers[0]
        context.user_data['selected_server_id'] = server['id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if 'selected_plan' in context.user_data:
            await show_payment_options(update, context)
        elif 'is_trial' in context.user_data and context.user_data['is_trial']:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
            await process_trial_activation(update, context)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
    keyboard = []
    for server in available_servers:
        location_info = f" ({server['location']})" if 'location' in server else ""
        button_text = f"üåç {server['name']}{location_info}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"server_{server['id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_plans")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    title = "üåç *–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    for server in available_servers:
        if 'description' in server and server['description']:
            title += f"*{server['name']}*: {server['description']}\n"
    
    if query:
        await query.edit_message_text(
            text=title,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=title,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def process_server_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    server_id = query.data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['selected_server_id'] = server_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if 'is_trial' in context.user_data and context.user_data['is_trial']:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        await process_trial_activation(update, context)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await show_payment_options(update, context)

async def process_trial_activation(update: Update, context: CallbackContext):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    server_id = context.user_data.get('selected_server_id')
    trial_days = context.user_data.get('trial_days', config.get_trial_days())
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
    if 'is_trial' in context.user_data:
        del context.user_data['is_trial']
    if 'trial_days' in context.user_data:
        del context.user_data['trial_days']
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = database.add_subscription(
        user_id=user_id,
        days=trial_days,
        payment_id=None,  # –ë–µ–∑ –ø–ª–∞—Ç–µ–∂–∞
        server_id=server_id
    )
    
    if subscription:
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –ø—Ä–æ–±–Ω—É—é
        subscription['is_trial'] = True
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray
        email = f"trial_user_{user_id}_{subscription['id']}"
        xray_user = xray_manager.add_user(email, server_id=server_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º UUID –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription['data']['vless_id'] = xray_user['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        server_name = "VPN"
        server = config.get_server_by_id(server_id)
        if server:
            server_name = server.get('name', f"Server {server_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            f"‚úÖ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
            f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ *{server_name}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {trial_days} –¥–Ω–µ–π.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")
            ]])
        )
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")
            ]])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
async def show_prices(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    query = None
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    
    plans = get_subscription_plans()
    
    if not plans:
        message = "–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        if query:
            await query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
    keyboard = []
    for plan in plans:
        days = plan.get('days', 0)
        price = plan.get('price', 0)
        title = plan.get('title', f"{days} –¥–Ω–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"{title} - ${price}"
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã Telegram Stars, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∑–≤–µ–∑–¥–∞—Ö
        if config.is_telegram_stars_enabled() and 'price_stars' in plan:
            button_text += f" / {plan['price_stars']} ‚≠ê"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plan_{days}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "üí∞ *–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã
    payment_info = []
    
    if config.get_crypto_bot_token():
        payment_info.append("‚Ä¢ üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot")
    
    if config.is_telegram_stars_enabled():
        payment_info.append("‚Ä¢ ‚≠ê Telegram Stars")
    
    if payment_info:
        message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n" + "\n".join(payment_info)
    
    if query:
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def select_plan(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    days = int(query.data.split('_')[1])
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    plans = get_subscription_plans()
    selected_plan = next((p for p in plans if p.get('days') == days), None)
    
    if not selected_plan:
        await query.edit_message_text(
            "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="prices")
            ]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['selected_plan'] = selected_plan
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    available_servers = xray_manager.get_available_servers()
    
    if len(available_servers) > 1:
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
        await show_server_selection(update, context)
    else:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤
        if available_servers:
            context.user_data['selected_server_id'] = available_servers[0]['id']
        else:
            context.user_data['selected_server_id'] = None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await show_payment_options(update, context)

async def show_payment_options(update: Update, context: CallbackContext, plan=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not plan and 'selected_plan' in context.user_data:
        plan = context.user_data['selected_plan']
    
    if not plan:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="prices")
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    server_id = context.user_data.get('selected_server_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    server_info = ""
    if server_id:
        server = config.get_server_by_id(server_id)
        if server:
            server_name = server.get('name', f"Server {server_id}")
            server_location = server.get('location', '')
            
            server_info = f"üåç –°–µ—Ä–≤–µ—Ä: *{server_name}*"
            if server_location:
                server_info += f" ({server_location})"
            server_info += "\n\n"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω CryptoBot
    if config.get_crypto_bot_token():
        keyboard.append([
            InlineKeyboardButton(
                f"üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (${plan['price']})", 
                callback_data=f"pay_crypto_{plan['days']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã Telegram Stars, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.is_telegram_stars_enabled() and 'price_stars' in plan:
        keyboard.append([
            InlineKeyboardButton(
                f"‚≠ê Telegram Stars ({plan['price_stars']} –∑–≤–µ–∑–¥)", 
                callback_data=f"pay_stars_{plan['days']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    title = plan.get('title', f"{plan['days']} –¥–Ω–µ–π")
    price = plan.get('price', 0)
    
    message = (
        f"üí∞ *–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {title}*\n\n"
        f"{server_info}"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def process_payment(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = query.data.split('_')
    payment_method = parts[1]
    days = int(parts[2])
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
    plans = get_subscription_plans()
    plan = next((p for p in plans if p.get('days') == days), None)
    
    if not plan:
        await query.edit_message_text(
            "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="prices")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    server_id = context.user_data.get('selected_server_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    server_info = ""
    if server_id:
        server = config.get_server_by_id(server_id)
        if server:
            server_name = server.get('name', f"Server {server_id}")
            server_info = f"üåç –°–µ—Ä–≤–µ—Ä: *{server_name}*\n\n"
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    if payment_method == "crypto":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = f"crypto_{int(time.time())}_{user_id}"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database.record_payment(
            user_id=user_id,
            payment_id=payment_id,
            amount=plan['price'],
            currency='USD',
            status='pending',
            subscription_days=days,
            server_id=server_id
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot
        try:
            payment_url = await payment_manager.create_crypto_invoice(
                payment_id=payment_id,
                amount=plan['price'],
                description=f"–ü–æ–¥–ø–∏—Å–∫–∞ VPN –Ω–∞ {days} –¥–Ω–µ–π"
            )
            
            if payment_url:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data[AWAITING_PAYMENT] = payment_id
                
                keyboard = [
                    [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"üí∞ *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π*\n\n"
                    f"{server_info}"
                    f"–¢–∞—Ä–∏—Ñ: {plan.get('title', f'{days} –¥–Ω–µ–π')}\n"
                    f"–°—É–º–º–∞: ${plan['price']}\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ CryptoBot. "
                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                job_name = f"payment_{payment_id}_{user_id}"
                context.job_queue.run_repeating(
                    check_payment_job,
                    interval=30,  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    first=30,     # –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    data={
                        'payment_id': payment_id,
                        'chat_id': update.effective_chat.id,
                        'message_id': query.message.message_id,
                        'user_id': user_id,
                        'server_id': server_id
                    },
                    name=job_name
                )
                
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data['payment_job'] = job_name
                
            else:
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")
                    ]])
                )
                
        except Exception as e:
            logger.error(f"Error creating crypto payment: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")
                ]])
            )
    
    elif payment_method == "stars":
        # –î–ª—è –æ–ø–ª–∞—Ç—ã Telegram Stars –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        selected_plan = {'days': days, 'price_stars': plan.get('price_stars', 0)}
        context.user_data['selected_plan'] = selected_plan
        context.user_data['server_id'] = server_id
        await handle_stars_payment(update, context)

async def check_payment_manually(update: Update, context: CallbackContext):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    payment_id = query.data.split('_')[2]
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    payment = database.get_payment(payment_id)
    
    if not payment:
        await query.edit_message_text(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    if payment['status'] == 'completed':
        # –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        await query.edit_message_text(
            "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    payment_verified = False
    
    if payment_id.startswith('crypto'):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CryptoBot
        payment_verified = await payment_manager.check_crypto_payment(payment_id)
    
    if payment_verified:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database.update_payment_status(payment_id, 'completed')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server_id = payment.get('server_id')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = database.add_subscription(
            user_id=user_id,
            days=payment['subscription_days'],
            payment_id=payment_id,
            server_id=server_id
        )
        
        if subscription:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray
            email = f"user_{user_id}_{subscription['id']}"
            xray_user = xray_manager.add_user(email, server_id=server_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º UUID –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription['data']['vless_id'] = xray_user['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            server_name = "VPN"
            if server_id:
                server = config.get_server_by_id(server_id)
                if server:
                    server_name = server.get('name', f"Server {server_id}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
            if 'payment_job' in context.user_data:
                try:
                    current_jobs = context.job_queue.get_jobs_by_name(context.user_data['payment_job'])
                    for job in current_jobs:
                        job.schedule_removal()
                    del context.user_data['payment_job']
                except Exception as e:
                    logger.error(f"Error removing payment job: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            if AWAITING_PAYMENT in context.user_data:
                del context.user_data[AWAITING_PAYMENT]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            await query.edit_message_text(
                f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!*\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ *{server_name}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {payment['subscription_days']} –¥–Ω–µ–π.\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")
                ]])
            )
        else:
            await query.edit_message_text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
                ]])
            )
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        await query.edit_message_text(
            "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")]
            ])
        )

async def check_payment_job(context: CallbackContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    job_data = context.job.data
    
    payment_id = job_data.get('payment_id')
    chat_id = job_data.get('chat_id')
    message_id = job_data.get('message_id')
    user_id = job_data.get('user_id')
    server_id = job_data.get('server_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    payment = database.get_payment(payment_id)
    
    if not payment or payment['status'] == 'completed':
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        context.job.schedule_removal()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    payment_verified = False
    
    if payment_id.startswith('crypto'):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CryptoBot
        payment_verified = await payment_manager.check_crypto_payment(payment_id)
    
    if payment_verified:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database.update_payment_status(payment_id, 'completed')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = database.add_subscription(
            user_id=user_id,
            days=payment['subscription_days'],
            payment_id=payment_id,
            server_id=server_id
        )
        
        if subscription:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray
            email = f"user_{user_id}_{subscription['id']}"
            xray_user = xray_manager.add_user(email, server_id=server_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º UUID –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription['data']['vless_id'] = xray_user['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            server_name = "VPN"
            if server_id:
                server = config.get_server_by_id(server_id)
                if server:
                    server_name = server.get('name', f"Server {server_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!*\n\n"
                         f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ *{server_name}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {payment['subscription_days']} –¥–Ω–µ–π.\n"
                         f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription")
                    ]])
                )
            except Exception as e:
                logger.error(f"Error updating message after payment: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        context.job.schedule_removal()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
async def show_subscription(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN"""
    query = None
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_subs = database.get_active_subscriptions(user_id)
    
    if not active_subs:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        message = (
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ VPN.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∞", callback_data="prices")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ])
        
        if query:
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    if len(active_subs) > 1:
        keyboard = []
        for sub in active_subs:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_name = "VPN"
            if 'server_id' in sub and sub['server_id']:
                server = config.get_server_by_id(sub['server_id'])
                if server:
                    server_name = server.get('name', f"Server {sub['server_id']}")
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{server_name}", 
                    callback_data=f"subscription_{sub['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ VPN. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        if query:
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ
    subscription = active_subs[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    server_info = ""
    server_id = subscription.get('server_id')
    if server_id:
        server = config.get_server_by_id(server_id)
        if server:
            server_name = server.get('name', f"Server {server_id}")
            server_location = server.get('location', '')
            
            server_info = f"üåç –°–µ—Ä–≤–µ—Ä: *{server_name}*"
            if server_location:
                server_info += f" ({server_location})"
            server_info += "\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    expiry_date = datetime.fromtimestamp(subscription['expires_at'])
    time_left = subscription['expires_at'] - time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    vless_id = subscription['data'].get('vless_id', 'unknown')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    email = f"user_{user_id}_{subscription['id']}"
    reality_link = xray_manager.generate_vless_link(vless_id, email, "reality", server_id)
    websocket_link = xray_manager.generate_vless_link(vless_id, email, "websocket", server_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    message = (
        f"üîπ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        f"{server_info}"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {format_time_left(time_left)}\n"
        f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date.strftime('%d.%m.%Y')}\n\n"
        f"üîë *–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n\n"
        f"üÜî UUID: `{vless_id}`\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ QR-–∫–æ–¥–æ–≤
    keyboard = [
        [
            InlineKeyboardButton("‚ö° VLESS Reality", callback_data=f"protocol_reality_{subscription['id']}"),
            InlineKeyboardButton("üåê WebSocket+TLS", callback_data=f"protocol_websocket_{subscription['id']}")
        ],
        [
            InlineKeyboardButton("üì± QR Reality", callback_data=f"qr_reality_{subscription['id']}"),
            InlineKeyboardButton("üì± QR WebSocket", callback_data=f"qr_websocket_{subscription['id']}")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def show_protocol_config(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = query.data.split('_')
    protocol = parts[1]
    subscription_id = parts[2]
    
    user_id = update.effective_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
    active_subs = database.get_active_subscriptions(user_id)
    subscription = next((s for s in active_subs if s['id'] == subscription_id), None)
    
    if not subscription:
        await query.edit_message_text(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞
    server_id = subscription.get('server_id')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    vless_id = subscription['data'].get('vless_id', 'unknown')
    email = f"user_{user_id}_{subscription['id']}"
    
    config_link = xray_manager.generate_vless_link(vless_id, email, protocol, server_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    protocol_name = "VLESS Reality" if protocol == "reality" else "VLESS WebSocket+TLS"
    
    message = (
        f"üîπ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {protocol_name}*\n\n"
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VLESS/V2ray:\n\n"
        f"`{config_link}`\n\n"
        f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
    
    keyboard = [
        [InlineKeyboardButton(f"üì± QR-–∫–æ–¥", callback_data=f"qr_{protocol}_{subscription_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="my_subscription")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_qr_code(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = query.data.split('_')
    protocol = parts[1]
    subscription_id = parts[2]
    
    user_id = update.effective_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
    active_subs = database.get_active_subscriptions(user_id)
    subscription = next((s for s in active_subs if s['id'] == subscription_id), None)
    
    if not subscription:
        await query.edit_message_text(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞
    server_id = subscription.get('server_id')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è QR-–∫–æ–¥–∞
    vless_id = subscription['data'].get('vless_id', 'unknown')
    email = f"user_{user_id}_{subscription['id']}"
    
    config_link = xray_manager.generate_vless_link(vless_id, email, protocol, server_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_image = generate_vless_qr(config_link)
    
    if qr_image:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        img_byte_arr = io.BytesIO()
        qr_image.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        protocol_name = "VLESS Reality" if protocol == "reality" else "VLESS WebSocket+TLS"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        await query.message.reply_photo(
            photo=InputFile(img_byte_arr),
            caption=f"üì± QR-–∫–æ–¥ –¥–ª—è {protocol_name}\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–≥–æ VPN-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await show_subscription(update, context)
    else:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_subscription")
            ]])
        )

async def show_traffic_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"""
    query = None
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_subs = database.get_active_subscriptions(user_id)
    
    if not active_subs:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        ]])
        
        if query:
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    if len(active_subs) > 1:
        keyboard = []
        for sub in active_subs:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_name = "VPN"
            if 'server_id' in sub and sub['server_id']:
                server = config.get_server_by_id(sub['server_id'])
                if server:
                    server_name = server.get('name', f"Server {sub['server_id']}")
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üìä {server_name}", 
                    callback_data=f"traffic_{sub['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
        
        if query:
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    subscription = active_subs[0]
    subscription_id = subscription['id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if query and query.data.startswith('traffic_'):
        subscription_id = query.data.split('_')[1]
        subscription = next((s for s in active_subs if s['id'] == subscription_id), None)
        if not subscription:
            await query.edit_message_text(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
                ]])
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞
    server_id = subscription.get('server_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    server_info = ""
    if server_id:
        server = config.get_server_by_id(server_id)
        if server:
            server_name = server.get('name', f"Server {server_id}")
            server_location = server.get('location', '')
            
            server_info = f"üåç –°–µ—Ä–≤–µ—Ä: *{server_name}*"
            if server_location:
                server_info += f" ({server_location})"
            server_info += "\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    traffic_used = subscription['data'].get('traffic_used', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Xray
    email = f"user_{user_id}_{subscription['id']}"
    xray_traffic = xray_manager.get_user_traffic(email, server_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    total_traffic = xray_traffic['total']
    if total_traffic > 0:
        subscription['data']['traffic_used'] = total_traffic
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    uplink = format_bytes(xray_traffic['uplink'])
    downlink = format_bytes(xray_traffic['downlink'])
    total = format_bytes(xray_traffic['total'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞*\n\n"
        f"{server_info}"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {uplink}\n"
        f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {downlink}\n"
        f"üìâ –í—Å–µ–≥–æ: {total}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def show_support_info(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    query = update.callback_query
    
    text = (
        "üîπ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VPN, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
        "‚úâÔ∏è Email: support@example.com\n"
        "üí¨ Telegram: @support_username\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/support_username")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users_count = len(database.get_all_users())
    active_subs = 0
    expired_subs = 0
    
    for user in database.get_all_users():
        user_subs = database.get_user_subscriptions(user['id'])
        for sub in user_subs:
            if sub['is_active'] and sub['expires_at'] > time.time():
                active_subs += 1
            else:
                expired_subs += 1
    
    text = (
        f"üîπ *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}\n"
        f"‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {expired_subs}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="admin_server")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    
    if data == "start":
        await show_main_menu(update, context)
    
    elif data == "prices":
        await show_prices(update, context)
    
    elif data == "buy_subscription":
        await show_prices(update, context)
    
    elif data == "my_subscription":
        await show_subscription(update, context)
    
    elif data == "traffic":
        await show_traffic_stats(update, context)
    
    elif data == "qr_code":
        await show_subscription(update, context)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    
    elif data == "support":
        await show_support_info(update, context)
    
    elif data == "admin":
        await show_admin_panel(update, context)
    
    elif data == "activate_trial":
        await activate_trial(update, context)
    
    elif data.startswith("plan_"):
        await select_plan(update, context)
    
    elif data.startswith("pay_"):
        await process_payment(update, context)
    
    elif data.startswith("check_payment_"):
        await check_payment_manually(update, context)
    
    elif data.startswith("protocol_"):
        await show_protocol_config(update, context)
    
    elif data.startswith("qr_"):
        await show_qr_code(update, context)
    
    elif data.startswith("subscription_"):
        # ID –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ context –∏ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ show_subscription
        subscription_id = data.split('_')[1]
        context.user_data['selected_subscription_id'] = subscription_id
        await show_subscription(update, context)
    
    elif data.startswith("traffic_"):
        await show_traffic_stats(update, context)
    
    elif data == "back_to_plans":
        # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞, –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        if 'selected_server_id' in context.user_data:
            del context.user_data['selected_server_id']
        await show_prices(update, context)
    
    elif data.startswith("server_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
        await process_server_selection(update, context)
    
    elif data == "show_server_selection":
        await show_server_selection(update, context)
    
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–µ–∑–¥ Telegram
async def handle_stars_payment(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars"""
    query = update.callback_query
    
    if not config.is_telegram_stars_enabled():
        await query.edit_message_text(
            "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")
            ]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    selected_plan = context.user_data.get('selected_plan')
    server_id = context.user_data.get('selected_server_id')
    
    if not selected_plan or 'price_stars' not in selected_plan:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prices")
            ]])
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    user_id = update.effective_user.id
    payment_id = f"stars_{int(time.time())}_{user_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    server_info = ""
    if server_id:
        server = config.get_server_by_id(server_id)
        if server:
            server_name = server.get('name', f"Server {server_id}")
            server_info = f"üåç –°–µ—Ä–≤–µ—Ä: *{server_name}*\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database.record_payment(
        user_id=user_id,
        payment_id=payment_id,
        amount=selected_plan.get('price_stars', 0),
        currency='STARS',
        status='pending',
        subscription_days=selected_plan.get('days', 30),
        server_id=server_id
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data[AWAITING_PAYMENT] = payment_id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
    stars_amount = selected_plan.get('price_stars', 0)
    message = (
        f"‚≠ê *–û–ø–ª–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é Telegram Stars*\n\n"
        f"{server_info}"
        f"–¢–∞—Ä–∏—Ñ: {selected_plan.get('days')} –¥–Ω–µ–π\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {stars_amount} –∑–≤–µ–∑–¥\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {stars_amount} –∑–≤–µ–∑–¥ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–µ–∑–¥—ã' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–µ–∑–¥—ã", callback_data=f"check_stars_{payment_id}")],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="prices")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    context.user_data[CHECKING_PAYMENT] = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(config.get_bot_token()).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("subscription", lambda update, context: show_subscription(update, context)))
    application.add_handler(CommandHandler("prices", lambda update, context: show_prices(update, context)))
    application.add_handler(CommandHandler("qr", lambda update, context: show_subscription(update, context)))
    application.add_handler(CommandHandler("traffic", lambda update, context: show_traffic_stats(update, context)))
    application.add_handler(CommandHandler("support", lambda update, context: show_support_info(update, context)))
    application.add_handler(CommandHandler("admin", lambda update, context: show_admin_panel(update, context) if is_admin(update.effective_user.id) else start_command(update, context)))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: show_main_menu(update, context)))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main() 